// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/wallet_service/v1/wallet.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WalletService_GetSaldoByUserID_FullMethodName              = "/proto.wallet_service.v1.WalletService/GetSaldoByUserID"
	WalletService_GetHistoryTransactionByUserID_FullMethodName = "/proto.wallet_service.v1.WalletService/GetHistoryTransactionByUserID"
	WalletService_TopUpSaldoUser_FullMethodName                = "/proto.wallet_service.v1.WalletService/TopUpSaldoUser"
	WalletService_DecreaseSaldoUser_FullMethodName             = "/proto.wallet_service.v1.WalletService/DecreaseSaldoUser"
	WalletService_TransferSaldoUser_FullMethodName             = "/proto.wallet_service.v1.WalletService/TransferSaldoUser"
)

// WalletServiceClient is the client API for WalletService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WalletServiceClient interface {
	GetSaldoByUserID(ctx context.Context, in *GetSaldoByUserIDRequest, opts ...grpc.CallOption) (*GetSaldoByUserIDResponse, error)
	GetHistoryTransactionByUserID(ctx context.Context, in *GetHistoryTransactionByUserIDRequest, opts ...grpc.CallOption) (*GetHistoryTransactionByUserIDResponse, error)
	TopUpSaldoUser(ctx context.Context, in *TopUpSaldouserRequest, opts ...grpc.CallOption) (*MutationResponse, error)
	DecreaseSaldoUser(ctx context.Context, in *DecreaseSaldouserRequest, opts ...grpc.CallOption) (*MutationResponse, error)
	TransferSaldoUser(ctx context.Context, in *TransferSaldouserRequest, opts ...grpc.CallOption) (*MutationResponse, error)
}

type walletServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWalletServiceClient(cc grpc.ClientConnInterface) WalletServiceClient {
	return &walletServiceClient{cc}
}

func (c *walletServiceClient) GetSaldoByUserID(ctx context.Context, in *GetSaldoByUserIDRequest, opts ...grpc.CallOption) (*GetSaldoByUserIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSaldoByUserIDResponse)
	err := c.cc.Invoke(ctx, WalletService_GetSaldoByUserID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) GetHistoryTransactionByUserID(ctx context.Context, in *GetHistoryTransactionByUserIDRequest, opts ...grpc.CallOption) (*GetHistoryTransactionByUserIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetHistoryTransactionByUserIDResponse)
	err := c.cc.Invoke(ctx, WalletService_GetHistoryTransactionByUserID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) TopUpSaldoUser(ctx context.Context, in *TopUpSaldouserRequest, opts ...grpc.CallOption) (*MutationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MutationResponse)
	err := c.cc.Invoke(ctx, WalletService_TopUpSaldoUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) DecreaseSaldoUser(ctx context.Context, in *DecreaseSaldouserRequest, opts ...grpc.CallOption) (*MutationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MutationResponse)
	err := c.cc.Invoke(ctx, WalletService_DecreaseSaldoUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) TransferSaldoUser(ctx context.Context, in *TransferSaldouserRequest, opts ...grpc.CallOption) (*MutationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MutationResponse)
	err := c.cc.Invoke(ctx, WalletService_TransferSaldoUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WalletServiceServer is the server API for WalletService service.
// All implementations must embed UnimplementedWalletServiceServer
// for forward compatibility.
type WalletServiceServer interface {
	GetSaldoByUserID(context.Context, *GetSaldoByUserIDRequest) (*GetSaldoByUserIDResponse, error)
	GetHistoryTransactionByUserID(context.Context, *GetHistoryTransactionByUserIDRequest) (*GetHistoryTransactionByUserIDResponse, error)
	TopUpSaldoUser(context.Context, *TopUpSaldouserRequest) (*MutationResponse, error)
	DecreaseSaldoUser(context.Context, *DecreaseSaldouserRequest) (*MutationResponse, error)
	TransferSaldoUser(context.Context, *TransferSaldouserRequest) (*MutationResponse, error)
	mustEmbedUnimplementedWalletServiceServer()
}

// UnimplementedWalletServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWalletServiceServer struct{}

func (UnimplementedWalletServiceServer) GetSaldoByUserID(context.Context, *GetSaldoByUserIDRequest) (*GetSaldoByUserIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSaldoByUserID not implemented")
}
func (UnimplementedWalletServiceServer) GetHistoryTransactionByUserID(context.Context, *GetHistoryTransactionByUserIDRequest) (*GetHistoryTransactionByUserIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHistoryTransactionByUserID not implemented")
}
func (UnimplementedWalletServiceServer) TopUpSaldoUser(context.Context, *TopUpSaldouserRequest) (*MutationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TopUpSaldoUser not implemented")
}
func (UnimplementedWalletServiceServer) DecreaseSaldoUser(context.Context, *DecreaseSaldouserRequest) (*MutationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecreaseSaldoUser not implemented")
}
func (UnimplementedWalletServiceServer) TransferSaldoUser(context.Context, *TransferSaldouserRequest) (*MutationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferSaldoUser not implemented")
}
func (UnimplementedWalletServiceServer) mustEmbedUnimplementedWalletServiceServer() {}
func (UnimplementedWalletServiceServer) testEmbeddedByValue()                       {}

// UnsafeWalletServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WalletServiceServer will
// result in compilation errors.
type UnsafeWalletServiceServer interface {
	mustEmbedUnimplementedWalletServiceServer()
}

func RegisterWalletServiceServer(s grpc.ServiceRegistrar, srv WalletServiceServer) {
	// If the following call pancis, it indicates UnimplementedWalletServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WalletService_ServiceDesc, srv)
}

func _WalletService_GetSaldoByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSaldoByUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).GetSaldoByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_GetSaldoByUserID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).GetSaldoByUserID(ctx, req.(*GetSaldoByUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_GetHistoryTransactionByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHistoryTransactionByUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).GetHistoryTransactionByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_GetHistoryTransactionByUserID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).GetHistoryTransactionByUserID(ctx, req.(*GetHistoryTransactionByUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_TopUpSaldoUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopUpSaldouserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).TopUpSaldoUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_TopUpSaldoUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).TopUpSaldoUser(ctx, req.(*TopUpSaldouserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_DecreaseSaldoUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecreaseSaldouserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).DecreaseSaldoUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_DecreaseSaldoUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).DecreaseSaldoUser(ctx, req.(*DecreaseSaldouserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_TransferSaldoUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferSaldouserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).TransferSaldoUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletService_TransferSaldoUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).TransferSaldoUser(ctx, req.(*TransferSaldouserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WalletService_ServiceDesc is the grpc.ServiceDesc for WalletService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WalletService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.wallet_service.v1.WalletService",
	HandlerType: (*WalletServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSaldoByUserID",
			Handler:    _WalletService_GetSaldoByUserID_Handler,
		},
		{
			MethodName: "GetHistoryTransactionByUserID",
			Handler:    _WalletService_GetHistoryTransactionByUserID_Handler,
		},
		{
			MethodName: "TopUpSaldoUser",
			Handler:    _WalletService_TopUpSaldoUser_Handler,
		},
		{
			MethodName: "DecreaseSaldoUser",
			Handler:    _WalletService_DecreaseSaldoUser_Handler,
		},
		{
			MethodName: "TransferSaldoUser",
			Handler:    _WalletService_TransferSaldoUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/wallet_service/v1/wallet.proto",
}
